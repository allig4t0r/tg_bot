import logging
from typing import Any

from aiogram import Bot, Router, F
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message, FSInputFile
from aiogram.filters import CommandStart, CommandObject
from aiogram.utils.markdown import hbold, hpre, hcode, hblockquote
from aiogram.handlers import ErrorHandler
from aiogram.fsm.context import FSMContext
from hurry.filesize import size
from prettytable import PrettyTable

from misc.outline import OutlineServer
from misc.db import BotDB
from bot.states import (WhereAmI,
                    AddNewStudio,
                    DeleteStudio,
                    DeleteOldStudios,
                    RenewStudios,
                    SendMessageStudios,
                    AnonymousFeedback)
from bot.log import log_tail
import bot.admin as admin
import bot.kb as kb
import bot.text as text
import misc.users as users
import config

logger = logging.getLogger(__name__)
bot = Bot(token=config.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
router = Router()

@router.message(CommandStart())
async def start_handler(msg: Message, state: FSMContext, command: CommandObject) -> None:
    args = command.args
    if args == 'feedback':
        await msg.answer(f"–í–∫–ª—é—á–∞–µ–º {hcode('–∞–Ω–æ–Ω–∏–º–Ω—ã–π')} —Ä–µ–∂–∏–º‚Ä¶")
        await state.set_state(AnonymousFeedback.message)
        await msg.answer("–í–∫–ª—é—á–µ–Ω–æ. –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
                         reply_markup=kb.ReplyKeyboardRemove())
    elif msg.from_user.id == users.kolya:
        await state.set_state(WhereAmI.main_menu_kolya)
        await msg.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {hbold('–í–ª–∞—Å—Ç–µ–ª–∏–Ω –°—Ç—É–¥–∏–π')}!",)
        await msg.answer_photo(photo=FSInputFile('vlastelin.jpg'),
                               reply_markup=kb.keyboard_kolya)
    # elif msg.from_user.id == users.backup_admin or msg.from_user.id == users.admin:
    elif msg.from_user.id == users.backup_admin:
        await state.set_state(WhereAmI.main_menu_admin)
        await msg.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {hbold('–í–ª–∞—Å—Ç–µ–ª–∏–Ω')}!",
                         reply_markup=kb.keyboard_admin)
    else:
        with BotDB() as db:
            studio = db.get_studio(msg.from_user.id)
            if studio:
                await state.set_state(WhereAmI.main_menu_studios)
                i = 0
                while (i < len(studio)):
                    await msg.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {hbold(studio[i][2])}! ‚ú®")
                    i += 1
                await msg.answer(text.text_desc,
                                 reply_markup=kb.keyboard_studios)
            else:
                await msg.answer(f"–¢–≤–æ–π ID: {msg.from_user.id}")
                await msg.answer_sticker(sticker="CAACAgQAAxkBAAEqfYFmAueHoh5q0-m73Nir_Yqm8ZlZ3wACegADJkm4A8VPV5-FVmVTNAQ", 
                                 reply_markup=kb.ReplyKeyboardRemove())

# ================================================================================================
# –º–æ—ë

# ================ –û–¢–ú–ï–ù–ê –ö–û–ú–ê–ù–î

@router.message(AddNewStudio.studio_name, F.text.casefold() == text.text_cancel.casefold())
@router.message(AddNewStudio.tg_id, F.text.casefold() == text.text_cancel.casefold())
@router.message(DeleteStudio.key_id, F.text.casefold() == text.text_cancel.casefold())
@router.message(DeleteOldStudios.confirm, F.text.casefold() == text.text_no.casefold())
@router.message(RenewStudios.confirm, F.text.casefold() == text.text_no.casefold())
@router.message(SendMessageStudios.confirm, F.text.casefold() == text.text_no.casefold())
async def admin_cancel_handler(msg: Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    logger.debug("STATE: cancelling state %r", current_state)
    await state.clear()
    await state.set_state(WhereAmI.main_menu_admin)
    await msg.answer("–ì–∞–ª—è, —É –Ω–∞—Å –æ—Ç–º–µ–Ω–∞!",
                         reply_markup=kb.keyboard_admin)

@router.message(AnonymousFeedback.confirm, F.text.casefold() == text.text_no.casefold())
async def anon_cancel_handler(msg: Message, state: FSMContext):
    current_state = await state.get_state()
    logger.debug("STATE: cancelling state %r", current_state)
    await state.clear()
    await state.set_state(AnonymousFeedback.message)
    await msg.answer("–ì–∞–ª—è, —É –Ω–∞—Å –æ—Ç–º–µ–Ω–∞! –ú–æ–∂–µ—Ç –µ—â—ë –ø–æ–ø—Ä–æ–±—É–µ–º?")

# ================ –ê–ù–û–ù–ò–ú–ù–´–ô –§–ò–î–ë–ï–ö

@router.message(AnonymousFeedback.message)
async def anon_send_message_handler(msg: Message, state: FSMContext):
    await state.update_data(anon_message = msg.text)
    await state.set_state(AnonymousFeedback.confirm)
    await msg.answer(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–µ—Ä–Ω–æ? (–¥–∞/–Ω–µ—Ç)\n\n{hblockquote(msg.text)}")

@router.message(AnonymousFeedback.confirm, F.text.casefold() == text.text_yes.casefold())
async def anon_send_message(msg: Message, state: FSMContext):
    state_data = await state.get_data()
    anon_message = '–ê–Ω–æ–Ω–∏–º–Ω—ã–π —Ñ–∏–¥–±–µ–∫:\n\n' + hblockquote(state_data.get("anon_message"))
    try:
        await bot.send_message(users.backup_admin, anon_message)
        await bot.send_message(users.admin, anon_message)
        logger.debug("FEEDBACK: new anonymous message was sent to admin")
        await msg.answer("–£—Å–ø–µ—Ö :)")
    except Exception as e:
        await msg.answer("–ü—Ä–æ—à—É –ø–æ–Ω—è—Ç—å –∏ –ø—Ä–æ—Å—Ç–∏—Ç—å, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ü´†")
        logger.debug(f"FEEDBACK: didn't manage to send anonymous message, {e}")
    await state.clear()
    await state.set_state(AnonymousFeedback.message)
    await msg.answer("–°—Ç–µ–π—Ç –æ—á–∏—â–µ–Ω, –º–æ–∂–Ω–æ –ø–æ—Å—ã–ª–∞—Ç—å –Ω–æ–≤–æ–µ")

@router.message(AnonymousFeedback.confirm)
async def anon_send_message_default(msg: Message):
    await msg.answer("–ù—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª")

# ================ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ô –°–¢–£–î–ò–ò

@router.message(WhereAmI.main_menu_admin, F.text.casefold() == text.button_studio_create.casefold())
async def admin_create_studio_start(msg: Message, state: FSMContext):
    await state.set_state(AddNewStudio.studio_name)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å—Ç—É–¥–∏–∏, –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å!",
                     reply_markup=kb.ReplyKeyboardRemove())

@router.message(AddNewStudio.studio_name)
async def admin_input_studio_name(msg: Message, state: FSMContext):
    if msg.text.startswith(config.DB_STUDIO_KEYWORD + ' '):
        await state.update_data(studio_name = msg.text)
        await state.set_state(AddNewStudio.tg_id)
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ tg_id, –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å ^^",
                         reply_markup=kb.ReplyKeyboardRemove())
    else:
        await msg.answer("–ò–º—è —Å—Ç—É–¥–∏–∏ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∫–µ–π–≤–æ—Ä–¥–∞ "
                         f"{hbold(config.DB_STUDIO_KEYWORD)}, –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å!",
                         reply_markup=kb.ReplyKeyboardRemove())

@router.message(AddNewStudio.tg_id)
async def admin_input_studio_tg_id(msg: Message, state: FSMContext):
    if msg.text.isdigit():
        await state.update_data(studio_tg_id = msg.text)
        await admin.create_studio(msg, state)
    else:
        await msg.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ, –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å!",
                         reply_markup=kb.ReplyKeyboardRemove())

# ================ –£–î–ê–õ–ï–ù–ò–ï –°–¢–£–î–ò–ò

@router.message(WhereAmI.main_menu_admin, F.text.casefold() == text.button_studio_delete.casefold())
async def admin_delete_studio_start(msg: Message, state: FSMContext):
    await state.set_state(DeleteStudio.key_id)
    await msg.answer("–£–∫–∞–∂–∏—Ç–µ key_id –Ω—É–∂–Ω–æ–π —Å—Ç—É–¥–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å.")
    await admin_show_studios(msg, state)

@router.message(DeleteStudio.key_id)
async def admin_input_studio_key_id(msg: Message, state: FSMContext):
    if msg.text.isdigit():
        await state.update_data(studio_key_id = msg.text)
        await admin.delete_studio(msg, state)
    else:
        await msg.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ, –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å!",
                         reply_markup=kb.ReplyKeyboardRemove())

# ================ RENEW –ö–õ–Æ–ß–ï–ô –í–°–ï–• –°–¢–£–î–ò–ô

@router.message(WhereAmI.main_menu_admin, F.text.casefold() == text.button_studios_renew.casefold())
async def admin_renew_studio_keys_start(msg: Message, state: FSMContext):
    await state.set_state(RenewStudios.confirm)
    await msg.answer("–û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–∏ –≤—Å–µ—Ö —Å—Ç—É–¥–∏–π, –•–æ–∑—è–∏–Ω?",
                     reply_markup=kb.ReplyKeyboardRemove())

@router.message(RenewStudios.confirm, F.text.casefold() == text.text_yes.casefold())
async def admin_renew_studio_keys(msg: Message, state: FSMContext):
    with BotDB() as db, OutlineServer() as outline:
        studios = db.get_studios()
        if studios:
            i = 0
            message_status = await msg.answer("–ù–∞—á–∏–Ω–∞—é renew —Å—Ç—É–¥–∏–π, —Ö–æ–∑—è–∏–Ω.")
            while (i < len(studios)):
                old_key = outline.get_key(studios[i][1])
                used_bytes = old_key.used_bytes
                if used_bytes is not None:
                    traffic_message = f"–ó–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {hcode(size(old_key.used_bytes))} " \
                                    f"–¥–ª—è —Å—Ç—É–¥–∏–∏ {hcode(old_key.name)}"
                    admin_message = f"{hcode(old_key.name)} : {hcode(size(old_key.used_bytes))}"
                    if (old_key.used_bytes // (1024*1024*1024)) > 50:
                        over_limit = old_key.used_bytes - config.TRAFFIC_LIMIT
                        pay_over_limit = over_limit // config.TRAFFIC_LIMIT + 1
                        traffic_message += f"\n\n–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥: {size(over_limit)} = {pay_over_limit*config.PAY_OVER_LIMIT} —Ä—É–±–ª–µ–π"
                        admin_message += f"\nOver the limit: {hcode(pay_over_limit*config.PAY_OVER_LIMIT)} —Ä—É–±–ª–µ–π"
                else:
                    traffic_message = f"–ó–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {hcode('0G')} " \
                                    f"–¥–ª—è —Å—Ç—É–¥–∏–∏ {hcode(old_key.name)}"
                    admin_message = f"{hcode(old_key.name)} : {hcode('–∞ —Ç—É—Ç –Ω–∏—á–µ–≥–æ')}"
                await bot.send_message(studios[i][0], traffic_message)
                logger.debug(f"BOT: sent traffic info to studio {old_key.name}")
                await bot.send_message(users.backup_admin, admin_message)
                logger.debug(f"BOT: sent traffic info to admin about {old_key.name}")
                await message_status.edit_text(f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç—É–¥–∏–∏ {hcode(studios[i][2])}")
                text = ''
                try:
                    outline.rename_key(key_id=str(studios[i][1]),
                                       name=studios[i][2] + '_old')
                    logger.debug(f"OUTLINE: key with key_id {studios[i][1]} and name {studios[i][2]} was "
                                "renamed to _old")
                    text += f"OUTLINE: –∫–ª—é—á {hcode(studios[i][2])} –±—ã–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω ‚úîÔ∏è\n"
                except Exception as e:
                    logger.exception("OUTLINE: didn't manage to rename a key with "
                                     f"key_id {studios[i][1]} and name {studios[i][2]}, {e}")
                    text += f"OUTLINE: –∫–ª—é—á {hcode(studios[i][2])} –ù–ï –±—ã–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω ‚ùå\n"
                rename_studio = db.rename_studio(key_id=studios[i][1],
                                                 new_name=studios[i][2] + '_old')
                if rename_studio:
                    text += f"DB: {hcode(studios[i][2])} –±—ã–ª–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ ‚òëÔ∏è\n\n"
                    try:
                        new_key = outline.create_key(name=studios[i][2])
                        logger.debug(f"OUTLINE: created new key with key_id {new_key.key_id} and name {new_key.name}")
                        text += f"OUTLINE: –∫–ª—é—á {hcode(studios[i][2])} –±—ã–ª —Å–æ–∑–¥–∞–Ω –∑–∞–Ω–æ–≤–æ ‚úîÔ∏è\n"
                    except Exception as e:
                        logger.exception("OUTLINE: didn't manage to create a key with "
                                         f"key_id {new_key.key_id} and name {new_key.name}, {e}")
                        text += f"OUTLINE: –∫–ª—é—á {hcode(studios[i][2])} –ù–ï –±—ã–ª –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω ‚ùå\n"
                    new_studio = db.create_studio(tg_id=studios[i][0],
                                                  key_id=new_key.key_id,
                                                  name=new_key.name,
                                                  access_url=new_key.access_url)
                    if new_studio:
                        logger.debug(f"DB: created new studio with key_id {new_key.key_id} and name {new_key.name}")
                        text += f"DB: {hcode(studios[i][2])} –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–Ω–æ–≤–æ ‚òëÔ∏è\n\n"
                        studio_message = f"–ù–æ–≤—ã–π –∫–ª—é—á –¥–ª—è {hcode(new_key.name)}:\n\n{hpre(new_key.access_url)}"
                        try:
                            await bot.send_message(studios[i][0], studio_message)
                            logger.debug(f"BOT: sent new key to studio {new_key.name}")
                            text += f"–ü–æ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç—É–¥–∏–∏ {hcode(new_key.name)} ‚òëÔ∏è"
                        except Exception as e:
                            logger.exception(f"BOT: failed to send the key to studio {new_key.name}, {e}")
                            text += f"–ù–ï –ø–æ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç—É–¥–∏–∏ {hcode(new_key.name)} ‚ùå"
                    else:
                        logger.error("DB: didn't manage to create studio with "
                                     f"key_id {new_key.key_id} and name {new_key.name}")
                        text += f"DB: {hcode(new_key.name)} –ù–ï –±—ã–ª–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ ‚ùå\n"
                else:
                    logger.error("DB: didn't manage to rename studio with "
                                 f"key_id {studios[i][1]} and name {studios[i][2]}")
                    text += f"DB: {hcode(studios[i][2])} –ù–ï –±—ã–ª–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ ‚ùå\n\n"
                await msg.answer(text)
                i += 1
            await message_status.delete()
        else:
            await msg.answer("–ê —á–æ—Ç —Å—Ç—É–¥–∏–π –∏ –Ω–µ—Ç—É =D",
                       reply_markup=kb.keyboard_admin)
    await msg.answer("–ì–æ—Ç–æ–≤–æ, —Ö–æ–∑—è–∏–Ω!",
                     reply_markup=kb.keyboard_admin)
    await state.clear()
    await state.set_state(WhereAmI.main_menu_admin)

@router.message(RenewStudios.confirm)
async def admin_renew_studio_keys_confirm(msg: Message):
    await msg.answer("–•–æ—á—É —á—ë—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, –±–µ–∑ —ç—Ç–∏—Ö —Å–æ–ø–ª–µ–π")

# ================ –ü–û–ö–ê–ó–ê–¢–¨ –°–¢–£–î–ò–ò

@router.message(WhereAmI.main_menu_admin, F.text.casefold() == text.button_studios_show.casefold())
async def admin_show_studios(msg: Message, state: FSMContext):
    with BotDB() as db:
        studios = db.get_studios(with_old=True)
        if studios:
            message = '\n'.join(str(s) for s in studios)
            current_state = await state.get_state()
            if current_state == WhereAmI.main_menu_admin:
                await msg.answer(f"{message}",
                                 reply_markup=kb.keyboard_admin)
            elif current_state == DeleteStudio.key_id:
                await msg.answer(f"{message}",
                             reply_markup=kb.ReplyKeyboardRemove())
        else:
            await msg.answer("–°—Ç—É–¥–∏–π –Ω–µ—Ç :)",
                             reply_markup=kb.keyboard_admin)

# ================ –£–î–ê–õ–ï–ù–ò–ï _OLD –ö–õ–Æ–ß–ï–ô

@router.message(WhereAmI.main_menu_admin, F.text.casefold() == text.button_studios_delete_old.casefold())
async def admin_delete_old_studios_start(msg: Message, state: FSMContext):
    await state.set_state(DeleteOldStudios.confirm)
    await msg.answer("–ì—Ä–æ—Ö–∞–µ–º –≤—Å—ë —Å—Ç–∞—Ä–æ–µ –∫ —Ö—É—è–º, –¥–∞? –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å.",
                     reply_markup=kb.ReplyKeyboardRemove())

@router.message(DeleteOldStudios.confirm, F.text.casefold() == text.text_yes.casefold())
async def admin_delete_old_studios(msg: Message, state: FSMContext):
    with BotDB() as db:
        studios = db.get_old_studios()
        if studios:
            i = 0
            while (i < len(studios)):
                await msg.answer(f"–ù–∞—Ö—É–π –∏–¥—ë—Ç {hcode(studios[i][2])}")
                await admin.delete_studio(msg, state, studios[i][1])
                i += 1
        else:
            await msg.answer("–ù—É –∏ –Ω–µ –Ω—É–∂–Ω—ã –Ω–∞–º —ç—Ç–∏ –≤–∞—à–∏ —Å—Ç—É–¥–∏–∏",
                             reply_markup=kb.keyboard_admin)
    await state.clear()
    await state.set_state(WhereAmI.main_menu_admin)

@router.message(DeleteOldStudios.confirm)
async def admin_delete_old_studios_confirm(msg: Message):
    await msg.answer("–•–æ—á—É —á—ë—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, –±–µ–∑ —ç—Ç–∏—Ö —Å–æ–ø–ª–µ–π")

# ================ –ü–û–°–õ–ê–¢–¨ –°–¢–£–î–ò–Ø–ú –°–û–û–ë–©–ï–ù–ò–ï

@router.message(WhereAmI.main_menu_admin, F.text.casefold() == text.button_studios_message.casefold())
async def admin_send_studios_message_start(msg: Message, state: FSMContext):
    await state.set_state(SendMessageStudios.message)
    await msg.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—É–¥–∏–π, {hbold('–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å')}",
                     reply_markup=kb.ReplyKeyboardRemove())

@router.message(SendMessageStudios.message)
async def admin_send_studios_message_input(msg: Message, state: FSMContext):
    await state.update_data(studio_message = msg.text)
    await msg.answer(f"–¢–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ—Å–ª–∞–Ω–æ, –≤–µ—Ä–Ω–æ?\n\n{hpre(msg.text)}")
    await state.set_state(SendMessageStudios.confirm)

@router.message(SendMessageStudios.confirm, F.text.casefold() == text.text_yes.casefold())
async def admin_send_studio_message(msg: Message, state: FSMContext):
    await msg.answer("–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å! –ü–æ—Å—ã–ª–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è‚Ä¶")
    state_data = await state.get_data()
    with BotDB() as db:
        studios = db.get_all_studios()
        if studios:
            i = 0
            while (i < len(studios)):
                await msg.answer(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –≤ {hcode(studios[i][2])}")
                await bot.send_message(studios[i][0], state_data.get("studio_message"))
                logger.info(f"BOT MESSAGE: sent message to studio {studios[i][2]}")
                i += 1
    await msg.answer(f"{hbold('–ì–æ—Ç–æ–≤–æ')}",
                     reply_markup=kb.keyboard_admin)
    await state.clear()
    await state.set_state(WhereAmI.main_menu_admin)

@router.message(SendMessageStudios.confirm)
async def admin_send_studios_message_confirm(msg: Message):
    await msg.answer("–•–æ—á—É —á—ë—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, –±–µ–∑ —ç—Ç–∏—Ö —Å–æ–ø–ª–µ–π")

# ================ –ü–û–ö–ê–ó–ê–¢–¨ –õ–û–ì–ò

@router.message(WhereAmI.main_menu_admin, F.text.casefold() == text.button_show_log.casefold())
async def admin_logtail(msg: Message):
    logs = log_tail(config.LOG_LINESNUM)
    message = '\n'.join(str(ll) for ll in logs)
    await msg.answer(f"{message}",
                     reply_markup=kb.keyboard_admin)

# ================ –ü–û–ö–ê–ó–ê–¢–¨ –¢–†–ê–§–ò–ö –í–°–ï–• –°–¢–£–î–ò–ô

@router.message(WhereAmI.main_menu_kolya, F.text.casefold() == text.button_kolya.casefold())
@router.message(WhereAmI.main_menu_admin, F.text.casefold() == text.button_studios_show_traffic.casefold())
async def admin_show_traffic_studios(msg: Message, state: FSMContext):
    await msg.answer("–¢—Ä–∞—Ñ–∏–∫ –≤—Å–µ—Ö —Å—Ç—É–¥–∏–π")
    traffic_message = await msg.answer("–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ, —Ö–æ–∑—è–∏–Ω‚Ä¶")
    with BotDB() as db, OutlineServer() as outline:
        studios = db.get_studios(with_old=True)
        current_state = await state.get_state()
        if studios:
            i = 0
            table = PrettyTable()
            table.field_names = ["–°—Ç—É–¥–∏—è", "–¢—Ä–∞—Ñ–∏–∫"]
            while (i < len(studios)):
                key = outline.get_key(str(studios[i][1]))
                if key.used_bytes is None:
                    table.add_row([studios[i][2], '0G'])
                else:
                    table.add_row([studios[i][2], size(key.used_bytes)])
                i += 1
            await traffic_message.edit_text(f"{hcode(table)}")
        else:
            if current_state == WhereAmI.main_menu_admin:
                await msg.answer("–°—Ç—É–¥–∏–π –Ω–µ—Ç :)",
                                 reply_markup=kb.keyboard_admin)
            elif current_state == WhereAmI.main_menu_kolya:
                await msg.answer("–ö–æ–ª—è–Ω!!! –°—Ç—É–¥–∏–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç üåö",
                                 reply_markup=kb.keyboard_kolya)
        # –≥–æ–≤–Ω–æ–∫–æ–¥, TODO: –ø–æ–ª–Ω–∞—è –æ–±–≤—è–∑–∫–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π guests –¥–ª—è –Ω–µ_—Å—Ç—É–¥–∏–π
        if current_state == WhereAmI.main_menu_kolya:
            kolya = outline.get_key('35')
            pizdyuk = outline.get_key('36')
            await msg.answer("–≠–∫—Å—Ç—Ä–∞ –∫–ª—é—á–∏ (—Ç—Ä–∞—Ñ–∏–∫ —Å—É–º–º–∞—Ä–Ω–æ –∑–∞ 30 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω–µ–π):\n\n"
                             f"{kolya.name} {size(int(kolya.used_bytes or 0))}\n"
                             f"{pizdyuk.name} {size(int(pizdyuk.used_bytes or 0))}")

# ================ –ü–û–ö–ê–ó–ê–¢–¨ –í–°–ï –ö–õ–Æ–ß–ò –ù–ï_–°–¢–£–î–ò–ô –° –°–ï–†–í–ï–†–ê

@router.message(WhereAmI.main_menu_admin, F.text.casefold() == text.button_admin_all_keys.casefold())
async def admin_show_non_studio_keys(msg: Message):
    with OutlineServer() as outline:
        keys = outline.get_keys()
        not_studios = []
        for key in keys:
            if not key.name.startswith(config.DB_STUDIO_KEYWORD):
                filter = key.name + ' ‚Üí ' + size(int(key.used_bytes or 0))
                not_studios.append(filter)
        if not_studios is None:
            message = "–ù–µ—Ç –Ω–µ_—Å—Ç—É–¥–∏–π :)"
        else:
            message = '\n'.join(str(kk) for kk in not_studios)
        await msg.answer(f"{message}",
                         reply_markup=kb.keyboard_admin)

# ================

@router.message(WhereAmI.main_menu_admin)
async def admin_handler(msg: Message):
    await msg.answer(f"–ñ–¥—É —É–∫–∞–∑–∞–Ω–∏–π, {hbold('–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å')}",
                     reply_markup=kb.keyboard_admin)

# ================================================================================================
# –ö–æ–ª—è–Ω
@router.message(WhereAmI.main_menu_kolya)
async def kolya_handler(msg: Message):
    await msg.answer("There is no escape",
                     reply_markup=kb.keyboard_kolya)

# ================================================================================================
# —Å—Ç—É–¥–∏–∏
@router.message(WhereAmI.main_menu_studios, F.text.casefold() == text.button_key.casefold())
async def studios_show_key(msg: Message):
    with BotDB() as db:
        keys = db.get_key_filtered(msg.from_user.id)
        if keys:
            i = 0
            while (i < len(keys)):
                await msg.answer(f"–ö–ª—é—á –¥–ª—è {keys[i][1]}:\n\n{hpre(keys[i][2])}")
                i += 1
        else:
            await msg.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω",
                     reply_markup=kb.keyboard_studios)

@router.message(WhereAmI.main_menu_studios, F.text.casefold() == text.button_traffic.casefold())
async def studios_show_traffic(msg: Message):
    message = await msg.answer("–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ‚Ä¶")
    with BotDB() as db, OutlineServer() as outline:
        studios = db.get_studio(msg.from_user.id)
        if studios:
            i = 0
            while (i < len(studios)):
                key = outline.get_key(studios[i][1])
                if i == 0:
                    if key.used_bytes is None:
                        await message.edit_text(f"{hbold(studios[i][2])} –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ —Ç—Ä–∞—Ñ–∏–∫")
                    else:
                        await message.edit_text(f"{hbold(studios[i][2])} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ {size(key.used_bytes)}")
                if i >= 1:
                    if key.used_bytes is None:
                        await msg.answer(f"{hbold(studios[i][2])} –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ —Ç—Ä–∞—Ñ–∏–∫")
                    else:
                        await msg.answer(f"{hbold(studios[i][2])} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ {size(key.used_bytes)}")
                i += 1

@router.message(WhereAmI.main_menu_studios, F.text.casefold() == text.button_apps.casefold())
async def studios_show_apps(msg: Message):
    await msg.answer(text.text_apps,
                     reply_markup=kb.keyboard_studios)

@router.message(WhereAmI.main_menu_studios, F.text.casefold() == text.button_iphone.casefold())
async def studios_show_iphone(msg: Message):
    await msg.answer(text.text_iphone,
                     reply_markup=kb.keyboard_studios)

@router.message(WhereAmI.main_menu_studios, F.text.casefold() == text.button_fail.casefold())
async def studios_show_fail(msg: Message):
    await msg.answer(text.text_fail,
                     reply_markup=kb.keyboard_studios)

@router.message(WhereAmI.main_menu_studios)
async def studios_handler(msg: Message):
    await msg.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é",
                     reply_markup=kb.keyboard_studios)

# await msg.answer_photo(photo="AgACAgIAAxkBAAEqetNmArtAYGmJr2_xYsN7DaoAAWkcBl0AAr_XMRsvBhlIecHp26Eda7wBAAMCAANzAAM0BA")
# @router.message(F.from_user.id.in_(users.studios))

@router.errors()
class MyHandler(ErrorHandler):
    async def error_handler(self) -> Any:
        logger.exception(
            "Unexpected exception %s: %s",
            self.exception_name,
            self.exception_message
        )

